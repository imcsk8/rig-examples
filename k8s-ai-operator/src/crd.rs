use kube::{CustomResource, CustomResourceExt, client::Client, Api, api::PatchParams, api::Patch};
use k8s_openapi::apiextensions_apiserver::pkg::apis::apiextensions::v1::CustomResourceDefinition;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use log::{info};
//use std::sync::{Arc, Mutex};
//use core::ops::{Deref, DerefMut};

pub const RESOURCE_NAME: &str = "aioperator.nortk.com";

/// Struct corresponding to the Specification (`spec`) part of the `AiOperator` resource, directly
/// reflects context of the `aioperator.yaml` file to be found in this repository.
/// The `AiOperator` struct will be generated by the `CustomResource` derive macro.
#[derive(CustomResource, Serialize, Deserialize, Debug, PartialEq, Clone, JsonSchema)]
#[kube(
    group = "nortk.com",
    version = "v1",
    kind = "AiOperator",
    plural = "aioperator",
    derive = "PartialEq",
    namespaced
)]
#[kube(status = "AiOperatorStatus")]
pub struct AiOperatorSpec {
    pub version: String,
    pub prompt: String,
}

#[derive(Deserialize, Serialize, Clone, Debug, Default, PartialEq, JsonSchema)]
pub struct AiOperatorStatus {
    pub installed: bool,
    pub configured: i32,
    pub maintenance: bool,
    pub waiting: bool,
    pub last_backup: String,
    pub state_hash: String,
    pub answer: String,
}

/// Action to be taken upon an `AiOperator` resource during reconciliation
pub enum AiOperatorAction {
    /// Create the subresources, this includes spawning `n` pods with Nextcloud service
    Create,
    /// Update subresurces and replicas
    Update,
    /// Delete all subresources created in the `Create` phase
    Delete,
    /// This `Nextcloud` resource is in desired state and requires no actions to be taken
    NoOp,
}



/// Creates the AiOperator CRD
/// This helps to avoid the manual creation of the AiOperator CRD
/// TODO: return proper values
pub async fn create_crd(client: Client) {
    let crds: Api<CustomResourceDefinition> = Api::all(client.clone());
    info!("Creating Nextcloud CRD");
    match crds.patch(RESOURCE_NAME,
        &PatchParams::apply("nortek"),
        &Patch::Apply(AiOperator::crd())
    ).await {
        //Ok(r) => info!("{} CRD created {:?}", RESOURCE_NAME, r),
        Ok(r) => info!("{} CRD created", RESOURCE_NAME),
        Err(e) => info!("Error creating {} CRD {:?}!", RESOURCE_NAME, e),
    };
}


